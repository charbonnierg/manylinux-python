#!/usr/bin/env bash

function installDependencies() {
    apt-get update \
    && apt-get install -y --no-install-recommends \
        build-essential \
        ca-certificates \
        checkinstall \
        comerr-dev \
        curl \
        git \
        libbz2-dev  \
        libc6-dev \
        libcurl4-openssl-dev \
        libdb-dev \
        libffi-dev  \
        libgdbm-dev \
        libkeyutils-dev \
        liblzma-dev \
        libncurses5-dev \
        libpcap-dev \
        libreadline-dev \
        libsqlite3-dev \
        libssl-dev \
        linux-kernel-headers \
        openssl \
        uuid-dev \
        wget \
        zlib1g-dev \
    && rm -rf /var/lib/apt/lists/*
}


function installOpenSSL() {
    ARCH="$1"
    wget "https://www.openssl.org/source/openssl-1.1.1q.tar.gz" -O "/tmp/openssl-1.1.1q.tar.gz" \
    && tar -xzf /tmp/openssl-1.1.1q.tar.gz -C /tmp \
    && cd /tmp/openssl-1.1.1q \
    && ./Configure "linux-$ARCH" --prefix=/usr/local/lib/ssl \
    && make -j4 \
    && make -j4 install \
    && cd - \
    && rm -rf /tmp/openssl-1.1.1q.tar.gz /tmp/openssl-1.1.1q
}

function installPatchelf() {
    ARCH="$1"
    mkdir -p /tmp/patchelf \
    && cd /tmp/patchelf \
    && curl -LO "https://github.com/NixOS/patchelf/releases/download/0.15.0/patchelf-0.15.0-${ARCH}.tar.gz" \
    && tar -xzf "patchelf-0.15.0-${ARCH}.tar.gz" \
    && mv bin/patchelf /usr/local/bin \
    && cd - \
    && rm -Rf /tmp/patchelf
}

function installPython() {
    mkdir -p /opt/python \
    && VERS="$1" \
    && PREFIX="/opt/python/$2" \
    && wget https://www.python.org/ftp/python/$VERS/Python-$VERS.tgz -O /tmp/Python-$VERS.tgz \
    && tar -xzf /tmp/Python-$VERS.tgz -C /tmp \
    && cd /tmp/Python-$VERS \
    && LDFLAGS="${LDFLAGS} -Wl,-rpath=/usr/local/lib/ssl/lib" \
        ./configure \
        --prefix=$PREFIX \
        --with-ensurepip=upgrade \
        --disable-ipv6 \
        --with-openssl=/usr/local/lib/ssl \
        --with-openssl-rpath=auto \
    && make -j4 \
    && make -j4 install \
    && rm -rf $PREFIX/share \
    && find $PREFIX -depth \( -type d -a -name test -o -name tests \) | xargs rm -rf \
    && find $PREFIX -type f -a \( -name '*.pyc' -o -name '*.pyo' \) -delete \
    && $PREFIX/bin/python3 -m pip install -U --no-cache-dir \
        auditwheel \
        auditwheel-symbols \
        build \
        pip \
        setuptools \
        wheel \
    && cd - \
    && rm -rf /tmp/Python-$VERS.tgz /tmp/Python-$VERS
}


function installAllPythonVersions() {
    installPython 3.7.14 cp37-cp37m
    installPython 3.8.14 cp38-cp38m
    installPython 3.9.14 cp39-cp39m
    installPython 3.10.7 cp310-cp310m
}


function main() {

    PLATFORM=${PLATFORM:-"linux/amd64"}

    case "$PLATFORM" in

        linux/amd64)
            echo "Building for platform: linux/amd64"
            installDependencies
            installOpenSSL x86_64
            installPatchelf x86_64
            installAllPythonVersions
            ;;

        linux/arm64)
            echo "Building for platform: linux/arm64"
            installDependencies
            installOpenSSL aarch64
            installPatchelf aarch64
            installAllPythonVersions
            ;;

        linux/arm/v7)
            echo "Building for platform: linux/arm/v7"
            installDependencies
            installOpenSSL generic32
            installPatchelf armv7l
            installAllPythonVersions
            ;;

        *)
            echo -n "Unsupported platform: {$PLATFORM}"
            ;;
    esac
}

main
